grasem {

grasemProgram (grasem: program) = ws* ohmGrammar glueSemantics+

ohmGrammar (grasem: grammar) = grammarName grammarBody

grammarBody (grasem: body) = "{" ws* grammarToken+ "}" ws*
grammarName (grasem: name) = name


glueSemantics (grasem: glue) = semanticsName semanticsParameters "=" ws* code? "[[" rewriteChar* "]]" ws*

code (grasem: code) = "{{" ws* codeChar* "}}" ws*

codeChar (grasem: code char) = ~"}}" token
rewriteChar (grasem: rewrite char) = ~"]]" token


semanticsName (grasem: semantics name) = name ws*
semanticsParameters (grasem: semantics parameters) = "[" ws* semanticsParam+ "]" ws*
semanticsParam (grasem: semantics param) = semanticsTreeParam | semanticsFlatParam
semanticsTreeParam (grasem: semantics tree parameter) = "@" ws* semanticsFlatParam
semanticsFlatParam (grasem: semantics flat parameter) = name ws*


name (grasem: name) = char1 charRest* ws*
char1 (grasem: char 1) = "_" | "A" .. "Z" | "a" .. "z"
charRest (grasem: char rest) = "0" .. "9" | char1

grammarToken (grasem: grammar token) = ~"}" token
token (grasem: token) = comment | string | tokenChar
tokenChar (grasem: token char) = tokenCharNested | tokenCharSimple
tokenCharNested (grasem: token char nested) = "{" ws* (~"{" ~"}" ~"}}" ~"]]" tokenChar)* "}" ws*
tokenCharSimple (grasem: token char simple) = ~"]]" any

comment (grasem: comment) = "%" notNewline* newline

newline (grasem: newline) = "\n"
notNewline (grasem: not newline) = ~"\n" any

string (grasem: string) = "\"" stringChar* "\""
stringChar (grasem: string char) = stringCharEscaped | stringCharNotEscaped
stringCharEscaped (grasem: string char escaped) = "\\" any
stringCharNotEscaped (grasem: string char not escaped) = ~"\"" any

ws (grasem: ws) = comment | newline | " " 

endGrammar (grasem: end grammar) = "}" &newline

}

