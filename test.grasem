grasem {

grasemProgram (grasem: program) = ws* ohmGrammar glueSemantics+

ohmGrammar (grasem: grammar) = grammarName grammarBody

grammarBody (grasem: body) = "{" ws* grammarToken+ "}" ws*
grammarName (grasem: name) = name


glueSemantics (grasem: glue) = semanticsName semanticsParameters "=" ws* code? "[[" rewriteChar* "]]" ws*

code (grasem: code) = "{{" ws* codeChar* "}}" ws*

codeChar (grasem: code char) = ~"}}" token
rewriteChar (grasem: rewrite char) = ~"]]" token


semanticsName (grasem: semantics name) = name ws*
semanticsParameters (grasem: semantics parameters) = "[" ws* semanticsParam+ "]" ws*
semanticsParam (grasem: semantics param) = semanticsTreeParam | semanticsFlatParam
semanticsTreeParam (grasem: semantics tree parameter) = "@" ws* semanticsFlatParam
semanticsFlatParam (grasem: semantics flat parameter) = name ws*


name (grasem: name) = char1 charRest* ws*
char1 (grasem: char 1) = "_" | "A" .. "Z" | "a" .. "z"
charRest (grasem: char rest) = "0" .. "9" | char1

grammarToken (grasem: grammar token) = ~"}" token
token (grasem: token) = comment | string | tokenChar
tokenChar (grasem: token char) = tokenCharNested | tokenCharSimple
tokenCharNested (grasem: token char nested) = "{" ws* (~"{" ~"}" ~"}}" ~"]]" tokenChar)* "}" ws*
tokenCharSimple (grasem: token char simple) = ~"]]" any

comment (grasem: comment) = "%" notNewline* newline

newline (grasem: newline) = "\n"
notNewline (grasem: not newline) = ~"\n" any

string (grasem: string) = "\"" stringChar* "\""
stringChar (grasem: string char) = stringCharEscaped | stringCharNotEscaped
stringCharEscaped (grasem: string char escaped) = "\\" any
stringCharNotEscaped (grasem: string char not escaped) = ~"\"" any

ws (grasem: ws) = comment | newline | " " 

endGrammar (grasem: end grammar) = "}" &newline

}


grasemProgram [@ws ohmGrammar @glueSemantics ] = [[#!/bin/bash\nsplit -p '%%%%%'  - "_" <<'%%EOF'\n${ws}${escapeEscapes (ohmGrammar)}\n%%%%%\n${glueSemantics}\n%%EOF]]

ohmGrammar [grammarName grammarBody] = [[${grammarName}${grammarBody}]]

grammarBody [lb @ws @grammarToken rb @ws2] = [[${lb}${ws}${grammarToken}${rb}${ws2}]]
grammarName [ name ] = [[${name}]] 


glueSemantics [semanticsName semanticsParameters eq @ws @code lbb @rewriteChar rbb @ws2] =
  [[${semanticsName}${semanticsParameters}${eq}${ws}${code}${lbb}${rewriteChar}${rbb}${ws2}]]

code [lbb @ws @codeChar rbb @ws2] = [[${lbb}${ws}${codeChar}${rbb}${ws2}]]

codeChar [token] = [[${token}]]
rewriteChar [token] = [[${token}]]


semanticsName [name @ws] = [[${name}${ws}]]
semanticsParameters [ lb @ws @semanticsParam rb @ws2] = [[${lb}${ws}${semanticsParam}${rb}${ws2}]]
semanticsParam [p] = [[${p}]]
semanticsTreeParam [at @ws semanticsFlatParam] = [[${at}${ws}${semanticsFlatParam}]]
semanticsFlatParam [name @ws] = [[${name}${ws}]]

name [char1 @charRest @ws] = [[${char1}${charRest}${ws}]]
char1 [c] = [[${c}]]
charRest [c] = [[${c}]]

grammarToken [token] = [[${token}]]
token [x] = [[${x}]]
tokenChar [c] = [[${c}]]
tokenCharNested [lb @ws @tokenChar rb @ws2] = [[${lb}${ws}${tokenChar}${rb}${ws2}]]
tokenCharSimple [c] = [[${c}]]

comment [pct @cs nl] = [[${pct}${cs}${nl}]]

newline [c] = [[${c}]]
notNewline [c] = [[${c}]]

string [lq @cs rq] = [[${lq}${cs}${rq}]]
stringChar [c] = [[${c}]]
stringCharEscaped [_bslash c] = [[${_bslash}${c}]]
stringCharNotEscaped [c] = [[${c}]]

ws [c] = [[${c}]]

endGrammar [c nl] = [[${c}${nl}]]
